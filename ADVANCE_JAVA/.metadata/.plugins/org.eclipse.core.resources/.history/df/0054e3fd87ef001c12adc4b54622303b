package study.HW;

import java.lang.reflect.Field;
import java.util.Scanner;

public class Test1 {

	public static void main(String[] args) throws NoSuchFieldException, SecurityException, InstantiationException, IllegalAccessException, ClassNotFoundException {
		//Class<Test> obj = Test.class;
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the class name");
		Class obj =Class.forName(sc.next());
		Object obj1 =obj.newInstance();
		Field[] field = obj.getDeclaredFields();
		
		for (Field field2 : field)
		{
			field2.setAccessible(true);
			System.out.println("object name :"+field2.getName()+ " : "+field2.get(obj1));
			//System.out.println(field2.set(obj, value););
		}
		
		Field id = obj.getDeclaredField("id1");
		id.setAccessible(true);
		System.out.println("Field name :"+id.getName());
		System.out.println("field Type :"+id.getType());
		
		
		//Test test=(Test) obj.newInstance();
		Object test=obj.newInstance();
		id.set(test, 25);
		Object idValue =id.get(test);
		System.out.println("id1 :"+idValue);

	}

}



//--------------------------------------------------------------------------------------------------------------

//newInstance
//public T newInstance()
//              throws InstantiationException,
//                     IllegalAccessException
//
//Creates a new instance of the class represented by this Classobject. The class is instantiated as if by a newexpression with an empty argument list. 
//The class is initialized if ithas not already been initialized. 
//Note that this method propagates any exception thrown by thenullary constructor, including a checked exception. Use ofthis method effectively bypasses the compile-time exceptionchecking that would otherwise be performed by the compiler.
//The Constructor.newInstance method avoids this problem by wrappingany exception thrown by the constructor in a (checked) InvocationTargetException.
//Returns:a newly allocated instance of the class represented by thisobject.
//Throws:IllegalAccessException - if the class or its nullaryconstructor is not accessible.
//InstantiationException - if this Class represents an abstract class,an interface, an array class, a primitive type, or void;or if the class has no nullary constructor;or if the instantiation fails for some other reason.
//ExceptionInInitializerError - if the initializationprovoked by this method fails.
//SecurityException - If a security manager, s, is present andthe caller's class loader is not the same as or anancestor of the class loader for the current class andinvocation of s.
//checkPackageAccess() denies access to the packageof this class.